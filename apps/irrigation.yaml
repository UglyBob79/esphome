# Include common stuff
packages:
  common: !include ../common/common.yaml
  hardware: !include ../hardware/esp8266/sonoff-4ch-pro.yaml

external_components:
  - source:
      type: local
      path: components
    components: [tasker]

tasker:
  schedules:
    - id: schedule_zone1
      days_of_week: 
        name: ${zone1_name} Days
        id: schedule_days_zone_1
      times:
        name: ${zone1_name} Times
        id: schedule_times_zone_1
      on_time:
        then:
          - script.execute:
              id: on_for_duration
              relay_id: 1
              duration: !lambda 'return id(irrigation_zone1_duration).state;'

number:
  - platform: template
    name: ${zone1_name} Duration
    id: irrigation_zone1_duration
    mode: slider
    unit_of_measurement: s
    icon: "mdi:timer-sand"
    optimistic: true
    initial_value: 0
    restore_value: True
    min_value: 0
    max_value: 600
    step: 30
    internal: false

  - platform: template
    name: ${zone2_name} Duration
    id: irrigation_zone2_duration
    mode: slider
    unit_of_measurement: s
    icon: "mdi:timer-sand"
    optimistic: true
    initial_value: 0
    restore_value: True
    min_value: 0
    max_value: 600
    step: 30
    internal: true # Not used

  - platform: template
    name: ${zone3_name} Duration
    id: irrigation_zone3_duration
    mode: slider
    unit_of_measurement: s
    icon: "mdi:timer-sand"
    optimistic: true
    initial_value: 0
    restore_value: True
    min_value: 0
    max_value: 600
    step: 30
    internal: true # Not used

  - platform: template
    name: ${zone4_name} Duration
    id: irrigation_zone4_duration
    mode: slider
    unit_of_measurement: s
    icon: "mdi:timer-sand"
    optimistic: true
    initial_value: 0
    restore_value: True
    min_value: 0
    max_value: 600
    step: 30
    internal: true # Not used
    
api:
  # Define a service to call the watering script from Home Assistant
  services:
    - service: on_for_duration
      variables:
        relay_id: int
        duration: int
      then:
        - script.execute:
            id: on_for_duration
            relay_id: !lambda 'return relay_id;'
            duration: !lambda 'return duration;'

    - service: stop
      then:
        - script.execute:
            id: stop_all

# Script for running the watering for a certain duration in seconds
script:
  - id: on_for_duration
    mode: parallel
    parameters:
      relay_id: int
      duration: int
    then:
      - lambda: |-
          ESP_LOGD("main", "Opening value on zone %d for duration %d", relay_id, duration);
      - script.execute:
          id: watering_control
          relay_id: !lambda 'return relay_id;'
          state: True
      - delay: !lambda 'return 1000 * duration;'
      - script.execute:
          id: watering_control
          relay_id: !lambda 'return relay_id;'
          state: false

    # Script to turn on or off specific relay
  - id: watering_control
    parameters:
      relay_id: int
      state: bool
    then:
      # id can't be dynamic in yaml, so need this C++ snippet to map relay_id to actual id
      - lambda: |-
          static switch_::Switch* relay_array[] = {
            id(relay_1),
            id(relay_2),
            id(relay_3),
            id(relay_4)
          };

          if (relay_id >= 1 && relay_id <= 4) {
            if (state) {
              relay_array[relay_id - 1]->turn_on();
            } else {
              relay_array[relay_id - 1]->turn_off();
            }
          }      

  # Script to stopp any running on duration script and shut off all relays
  - id: stop_all
    then:
      - script.stop:
          id: on_for_duration
      - switch.turn_off: relay_1
      - switch.turn_off: relay_2
      - switch.turn_off: relay_3
      - switch.turn_off: relay_4